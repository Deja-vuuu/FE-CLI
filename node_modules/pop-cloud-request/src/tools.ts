import humps from 'humps';
import {
  merge,
  forOwn,
  isUndefined,
  isNull,
  isNaN,
  isString,
  isEmpty,
  isObject,
  isArray,
  cloneDeep,
  pull,
} from 'lodash';
// import type { QueryConfig, RequestAndQuery } from '@/utils/gql';

export const pruneEmpty = (obj: any) => {
  return (function prune(current) {
    forOwn(current, (value, key) => {
      if (
        isUndefined(value) ||
        isNull(value) ||
        isNaN(value) ||
        (isString(value) && isEmpty(value)) ||
        (isObject(value) && isEmpty(prune(value)))
      ) {
        // eslint-disable-next-line no-param-reassign
        delete current[key];
      }
    });
    if (isArray(current)) pull(current, undefined);

    return current;
  })(cloneDeep(obj));
};


// TODO: Translator

export function gqlPaginationListTranslator(res: {
  page: number;
  size: number;
  data: any[];
  agg: any;
}) {
  const { page, size, data, agg } = res;
  return {
    total: agg?.[0].total || 0,
    data,
    current: page,
    pageSize: size,
  };
}

export function gqlOptionsTranslator(res: { options: any }) {
  if (isArray(res)) {
    return res;
  }
  return res.options || [];
}

export const decamelizeKeys = (obj = {}) => {
  const noConvert = /(ID)/g;
  return humps.decamelizeKeys(obj, (key, convert) => {
    const res = key.replace(noConvert, (_, str: string) => `_${str.toLowerCase()}`);
    return convert(res);
  });
};

/**
 * 对象转字符串, key上不带引号
 * @param obj_from_json
 * Cheers to Derek: https://stackoverflow.com/questions/11233498/json-stringify-without-quotes-on-properties
 */
const stringify = (obj_from_json: { [x: string]: any; redirect?: string }) => {
  if (typeof obj_from_json !== 'object' || Array.isArray(obj_from_json)) {
    // not an object, stringify using native function
    return JSON.stringify(obj_from_json);
  }
  // Implements recursive object serialization according to JSON spec
  // but without quotes around the keys.
  const props: string = Object.keys(obj_from_json)
    .map((key) => `${key}:${stringify(obj_from_json[key])}`)
    .join(',');
  return `{${props}}`;
};

export const generateArgs2Graphql = (obj: Record<string, unknown>) => {
  const res = pruneEmpty(obj);
  // TODO: 递归处理and
  const and = res.where?.and || {};
  if (Object.keys(and).length === 1) {
    res.where = { ...res.where, ...and };
    delete res.where.and;
  }
  return isEmpty(res) ? '' : stringify(res).replace(/^{(.*?)}$/g, '($1)');
};

export const buildOffset = (current = 1, pageSize = 10) => {
  return (current - 1) * pageSize;
};

export const buildSort = (sort?: Record<string, 'descend' | 'ascend' | null>) => {
  return Object.entries(sort || {}).reduce((o, [key, val]) => {
    if (val) {
      // eslint-disable-next-line no-param-reassign
      o[key] = val.replace(/end$/, '');
    }
    return o;
  }, {});
};

/**
 * 生成简单的分页查询语句并处理返回结构
 * @param option
 */
export const generatePaginationQuery = (option: {
  client: any;
  name: string;
  fields: string;
  uniqueKey?: string;
  page?: number;
  size?: number;
  where?: Record<string, unknown>;
  order?: Record<string, any>;
  config?: any;
}) => {
  const {
    client,
    name,
    fields = '',
    uniqueKey = 'id',
    where,
    order,
    page = 1,
    size = 20,
    config,
  } = option;

  const defaultWhere = {
    deleted_at: { is_null: true },
  };
  const whereRes = (() => {
    if (where?.and) {
      return merge({ and: defaultWhere }, where);
    }
    return merge(defaultWhere, where);
  })();

  const $1 = generateArgs2Graphql({
    where: whereRes,
  });

  const $2 = generateArgs2Graphql({
    where: whereRes,
    offset: buildOffset(page, size),
    order_by: decamelizeKeys(buildSort(order)),
    limit: size,
  });
  return client
    .query(
      `
    query {
      agg: ${name}${$1} {
        total: count_${uniqueKey}
      }
      data: ${name}${$2} {
        ${fields}
      }
    }
  `,
      config,
    )
    .then((res: any) => gqlPaginationListTranslator({ ...res, page, size }));
};


export const extendQuery = (request, _config, prefix = '') => {
  // eslint-disable-next-line no-underscore-dangle
  const __query = (query, config?) => {
    return request(`${prefix}/graphql/user`, {
      method: 'POST',
      data: {
        ...merge(_config, config),
        query,
      },
    });
  };

  // @ts-ignore
  request.query = __query;

  return request
};