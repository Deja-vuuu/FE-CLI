"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-04-15 16:41:18
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ink_1 = require("ink");
const React = tslib_1.__importStar(require("react"));
const react_1 = require("react");
const ARROW_UP = '\u001B[A';
const ARROW_DOWN = '\u001B[B';
const ARROW_LEFT = '\u001B[D';
const ARROW_RIGHT = '\u001B[C';
const ENTER = '\r';
const CTRL_C = '\x03';
const BACKSPACE = '\x08';
const DELETE = '\x7F';
function ignoreCase(input) {
    return (input.toUpperCase() + input.toLowerCase()).split('');
}
exports.ignoreCase = ignoreCase;
class KeyboardReceiver extends react_1.PureComponent {
    constructor(props) {
        super(props);
        this.stdin = undefined;
        this.handleInput = (data) => {
            if (!this.props.focus) {
                return;
            }
            const value = data.toString();
            if (value === ENTER && this.props.onEnter) {
                this.props.onEnter();
                return;
            }
            if ((value === DELETE || value === BACKSPACE) && this.props.onDelete) {
                this.props.onDelete();
                return;
            }
            if (value === CTRL_C && this.props.onInterrupt) {
                this.props.onInterrupt();
                return;
            }
            if (value === ARROW_UP && this.props.onArrowUp) {
                this.props.onArrowUp();
                return;
            }
            if (value === ARROW_RIGHT && this.props.onArrowRight) {
                this.props.onArrowRight();
                return;
            }
            if (value === ARROW_DOWN && this.props.onArrowDown) {
                this.props.onArrowDown();
                return;
            }
            if (value === ARROW_LEFT && this.props.onArrowLeft) {
                this.props.onArrowLeft();
                return;
            }
            if (!this.props.keys || this.props.keys.indexOf(value) > -1) {
                this.props.onPress && this.props.onPress(value);
                return;
            }
        };
    }
    componentDidMount() {
        if (this.props.focus) {
            this.stdin.on('data', this.handleInput);
        }
    }
    componentWillReceiveProps(nextProps) {
        if (nextProps.focus) {
            if (!this.props.focus) {
                this.stdin.on('data', this.handleInput);
            }
        }
        else {
            if (this.props.focus) {
                this.stdin.removeListener('data', this.handleInput);
            }
        }
    }
    componentWillUnmount() {
        this.stdin.removeListener('data', this.handleInput);
        this.stdin = undefined;
    }
    render() {
        return (React.createElement(ink_1.StdinContext.Consumer, null, ({ stdin }) => {
            this.stdin = stdin;
            return this.props.children;
        }));
    }
}
exports.KeyboardReceiver = KeyboardReceiver;
