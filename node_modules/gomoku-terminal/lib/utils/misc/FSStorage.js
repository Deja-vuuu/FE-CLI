"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-04-12 17:08:16
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
class FSStorage {
    constructor(filename) {
        this.filename = filename;
        this.data = {};
    }
    init() {
        const pidFile = this.filename + '.lock';
        try {
            fs_extra_1.default.writeFileSync(pidFile, process.pid + '', {
                flag: 'wx',
            });
        }
        catch (e) {
            if (e.code === 'EEXIST') {
                let pid = '';
                try {
                    pid = fs_extra_1.default.readFileSync(pidFile, 'utf8').trim();
                }
                catch (_a) { }
                throw new Error(`An old process(pid: ${pid}) is running, please check it. If you ensure the process is killed, please delete the lock file(${pidFile}), and then restart your application.`);
            }
            throw new Error(`write lock file "${this.filename}.lock" error: ${e.code}`);
        }
        if (!fs_extra_1.default.existsSync(this.filename)) {
            fs_extra_1.default.writeFileSync(this.filename, '');
            return;
        }
        const initialData = fs_extra_1.default.readFileSync(this.filename, 'utf8');
        if (initialData) {
            this.data = this.parse(initialData);
        }
    }
    parse(data) {
        return data
            .trim()
            .split('\n')
            .reduce((prev, now) => {
            const sep = now.indexOf(':');
            if (sep === -1) {
                throw new Error(`invalid data line(:)`);
            }
            prev[now.substr(0, sep)] = now.substr(sep + 1);
            return prev;
        }, {});
    }
    stringify(data) {
        return Object.keys(data)
            .map((key) => `${key}:${data[key]}`)
            .join('\n');
    }
    destroy() {
        fs_extra_1.default.writeFileSync(this.filename, this.stringify(this.data));
        fs_extra_1.default.unlinkSync(this.filename + '.lock');
    }
    setItem(key, value) {
        if (key.indexOf(':') > -1) {
            throw new Error('invalid item key');
        }
        this.data[key] = value;
        return fs_extra_1.default.writeFile(this.filename, this.stringify(this.data));
    }
    getItem(key) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.data.hasOwnProperty(key)) {
                return this.data[key];
            }
            return null;
        });
    }
    removeItem(key) {
        delete this.data[key];
        return fs_extra_1.default.writeFile(this.filename, this.stringify(this.data));
    }
}
exports.FSStorage = FSStorage;
