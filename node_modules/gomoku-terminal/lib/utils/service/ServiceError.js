"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-01-18 20:46:41
 */
Object.defineProperty(exports, "__esModule", { value: true });
let used;
function code(value, message) {
    if (__DEV__) {
        used = used || [];
        const prefix = (value + '').substr(0, 3);
        if (used.indexOf(prefix) === -1) {
            used.push(prefix);
        }
        else if (used[used.length - 1] !== prefix) {
            throw new Error(`error prefix ${prefix} is intermittent`);
        }
        if (used.indexOf(value + '') !== -1) {
            throw new Error(`error code ${value} is used already`);
        }
        used.unshift(value + '');
    }
    return { value, message };
}
exports.code = code;
function from(e, code) {
    if (e instanceof ServiceError) {
        return e;
    }
    return new ServiceError(code, e instanceof Error ? e.message : e ? e + '' : 'Server Internal Error');
}
exports.from = from;
class ServiceError extends Error {
    constructor(code, message, data) {
        super(message);
        this.name = 'ServiceError';
        Object.setPrototypeOf(this, new.target.prototype);
        if (typeof code === 'number') {
            this.code = code;
            this.message = message || 'Unknown';
            this.data = data;
        }
        else {
            this.code = code.value;
            this.message = typeof message === 'string' ? message : code.message;
            this.data = typeof message === 'string' ? data : message;
        }
    }
    set(key, value) {
        this[key] = value;
        return this;
    }
    toJSON() {
        return {
            source: this.source,
            uuid: this.uuid,
            code: this.code,
            message: this.message,
            data: this.data,
        };
    }
    is(code) {
        if (typeof code === 'number') {
            return code === this.code;
        }
        return code.value === this.code;
    }
    toString() {
        return `[${this.source || 'Unknown'}:${this.code}]: ${this.message}`;
    }
}
exports.ServiceError = ServiceError;
