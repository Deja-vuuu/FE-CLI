"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-01-31 21:05:01
 *
 * 落子类棋牌类游戏通用工具
 * 比如 五子棋, 围棋, 黑白棋
 */
Object.defineProperty(exports, "__esModule", { value: true });
const numberFormat_1 = require("../misc/numberFormat");
class Board {
    constructor(width, height, initial, Factory = Int8Array) {
        this.width = width;
        this.height = height;
        this.Factory = Factory;
        this.data = new Factory(width * height);
        this.data.fill(initial);
    }
    get(x, y) {
        return this.data[y * this.width + x];
    }
    set(x, y, value) {
        this.data[y * this.width + x] = value;
    }
    row(y) {
        return this.data.slice(y * this.width, (y + 1) * this.width);
    }
    col(x) {
        const col = new this.Factory(this.height);
        for (let i = 0; i < this.height; i++) {
            col[i] = this.get(x, i);
        }
        return col;
    }
    display(chars = '⋅•◦') {
        let str = '  ' +
            Array(this.width)
                .fill(0)
                .map((_, index) => numberFormat_1.itos(index))
                .join(' ') +
            '\n';
        for (let y = 0; y < this.height; y++) {
            str += numberFormat_1.itos(y);
            for (let x = 0; x < this.width; x++) {
                const value = this.get(x, y);
                str += ' ' + chars.charAt(value) || numberFormat_1.itos(value);
            }
            str += '\n';
        }
        return str;
    }
}
exports.Board = Board;
function boardDecodeHand(hand) {
    const t = numberFormat_1.stoi(hand.substr(2)) || 0;
    const c0 = hand.charAt(0);
    const c1 = hand.charAt(1);
    if (c0 === '-' && c1 === '-') {
        return { x: -1, y: -1, t };
    }
    const x = numberFormat_1.stoi(c0);
    const y = numberFormat_1.stoi(c1);
    return { x, y, t };
}
exports.boardDecodeHand = boardDecodeHand;
function boardEncodeHand({ x, y, t }) {
    if (x === -1 && y === -1) {
        return '--' + numberFormat_1.itos(t);
    }
    return numberFormat_1.itos(x) + numberFormat_1.itos(y) + numberFormat_1.itos(t);
}
exports.boardEncodeHand = boardEncodeHand;
function boardDecodeRecord(record) {
    record = record.trim();
    if (!record) {
        return [];
    }
    return record.split(',').map(boardDecodeHand);
}
exports.boardDecodeRecord = boardDecodeRecord;
function boardEncodeRecord(record) {
    return record.map(boardEncodeHand).join(',');
}
exports.boardEncodeRecord = boardEncodeRecord;
