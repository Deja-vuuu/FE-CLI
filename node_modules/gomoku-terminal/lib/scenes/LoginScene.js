"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-04-12 16:04:48
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ink_1 = require("ink");
const ink_text_input_1 = tslib_1.__importDefault(require("ink-text-input"));
const lodash_1 = require("lodash");
const mobx_1 = require("mobx");
const custom_1 = require("mobx-react/custom");
const React = tslib_1.__importStar(require("react"));
const react_1 = require("react");
const Focusable_1 = require("../components/Focusable");
const KeyboardReceiver_1 = require("../components/KeyboardReceiver");
const GomokuStore_1 = require("../store/GomokuStore");
const UserStore_1 = require("../store/UserStore");
const api_1 = require("../utils/service/api");
const ServiceError_1 = require("../utils/service/ServiceError");
let LoginScene = class LoginScene extends react_1.Component {
    constructor() {
        super(...arguments);
        this.username = '';
        this.password = '';
        this.error = '';
        this.loading = false;
        this.handleChange = lodash_1.memoize((key) => mobx_1.action((value) => {
            if (value.length > 20) {
                return;
            }
            this[key] = value;
        }));
        this.handleAnonymous = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.loading) {
                return;
            }
            this.set(void 0, true);
            try {
                const doc = yield api_1.userLogin({
                    kind: 'username',
                    username: '',
                    mobile: '',
                    email: '',
                    password: '',
                    withToken: true,
                    anonymous: true,
                });
                UserStore_1.User.login(doc);
                yield GomokuStore_1.Gomoku.initSocket();
                GomokuStore_1.Gomoku.push('RoomList');
            }
            catch (e) {
                this.set(e + '', false);
            }
        });
        this.handleLogin = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.loading) {
                return;
            }
            if (this.username.length < 6 || this.password.length < 6) {
                this.set('Please input username & password, both min length is 6.');
                return;
            }
            this.set(void 0, true);
            try {
                const doc = yield api_1.userLogin({
                    kind: 'username',
                    username: this.username,
                    password: this.password,
                    mobile: '',
                    email: '',
                    withToken: true,
                    anonymous: false,
                });
                UserStore_1.User.login(doc);
                yield GomokuStore_1.Gomoku.initSocket();
                GomokuStore_1.Gomoku.push('RoomList');
            }
            catch (e) {
                if (e instanceof ServiceError_1.ServiceError && e.code === 404) {
                    try {
                        yield api_1.userRegister({
                            username: this.username,
                            mobile: '',
                            email: '',
                            password: this.password,
                            nickname: this.username,
                        });
                        this.set(void 0, false);
                        yield this.handleLogin();
                    }
                    catch (e) {
                        this.set(e + '', false);
                    }
                }
                else {
                    this.set(e + '', false);
                }
            }
        });
        this.handleExit = () => {
            process.exit(0);
        };
    }
    set(error = this.error, loading = this.loading) {
        this.error = error;
        this.loading = loading;
    }
    render() {
        return (React.createElement(Focusable_1.FocusableContainer, null,
            React.createElement(ink_1.Text, { bold: true }, "Login"),
            React.createElement(ink_1.Box, { marginTop: 1, marginBottom: 1, alignItems: "flex-start", flexDirection: "column" },
                React.createElement(Focusable_1.Focusable, { y: 0, x: 0, underline: true, focusProps: Focusable_1.inputFocusProps },
                    React.createElement(ink_text_input_1.default, { placeholder: "username            ", value: this.username, onChange: this.handleChange('username') })),
                React.createElement(Focusable_1.Focusable, { y: 1, x: 0, underline: true, focusProps: Focusable_1.inputFocusProps },
                    React.createElement(ink_text_input_1.default, { placeholder: "password            ", value: this.password, onChange: this.handleChange('password'), mask: "*" }))),
            React.createElement(ink_1.Box, { flexDirection: "row" },
                React.createElement(Focusable_1.Focusable, { y: 2, x: -1, margin: 1, underline: true, focusProps: Focusable_1.btnFocusProps },
                    React.createElement(KeyboardReceiver_1.KeyboardReceiver, { onEnter: this.handleAnonymous }, "Anonymous")),
                React.createElement(Focusable_1.Focusable, { y: 2, x: 0, margin: 1, underline: true, focusProps: Focusable_1.btnFocusProps },
                    React.createElement(KeyboardReceiver_1.KeyboardReceiver, { onEnter: this.handleLogin }, "Go")),
                React.createElement(Focusable_1.Focusable, { y: 2, x: 1, margin: 1, underline: true, focusProps: Focusable_1.btnFocusProps },
                    React.createElement(KeyboardReceiver_1.KeyboardReceiver, { onEnter: this.handleExit }, "Exit"))),
            React.createElement(ink_1.Color, { red: !this.loading, cyan: this.loading },
                React.createElement(ink_1.Text, null, this.loading ? 'LoginScene...' : this.error || ' '))));
    }
};
tslib_1.__decorate([
    mobx_1.observable
], LoginScene.prototype, "username", void 0);
tslib_1.__decorate([
    mobx_1.observable
], LoginScene.prototype, "password", void 0);
tslib_1.__decorate([
    mobx_1.observable
], LoginScene.prototype, "error", void 0);
tslib_1.__decorate([
    mobx_1.observable
], LoginScene.prototype, "loading", void 0);
tslib_1.__decorate([
    mobx_1.action
], LoginScene.prototype, "set", null);
LoginScene = tslib_1.__decorate([
    custom_1.observer
], LoginScene);
exports.LoginScene = LoginScene;
