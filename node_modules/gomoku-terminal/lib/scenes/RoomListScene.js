"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-04-12 16:04:48
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ink_1 = require("ink");
const lodash_1 = require("lodash");
const mobx_1 = require("mobx");
const custom_1 = require("mobx-react/custom");
const consts_1 = require("monofile-utilities/lib/consts");
const React = tslib_1.__importStar(require("react"));
const react_1 = require("react");
const Focusable_1 = require("../components/Focusable");
const KeyboardReceiver_1 = require("../components/KeyboardReceiver");
const GomokuStore_1 = require("../store/GomokuStore");
const numberFormat_1 = require("../utils/misc/numberFormat");
let RoomListScene = class RoomListScene extends react_1.Component {
    constructor(props) {
        super(props);
        this.error = '';
        this.loading = false;
        this.keys = KeyboardReceiver_1.ignoreCase('RN');
        this.handleRefresh = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.loading) {
                return;
            }
            this.set(void 0, true);
            try {
                yield GomokuStore_1.Gomoku.listRoom();
                this.set('', false);
            }
            catch (e) {
                this.set(e.message || e + '', false);
            }
        });
        this.handleNew = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.loading) {
                return;
            }
            this.set(void 0, true);
            try {
                yield GomokuStore_1.Gomoku.enterRoom(null);
                GomokuStore_1.Gomoku.push('Board');
            }
            catch (e) {
                this.set(e + '', false);
            }
        });
        this.handleEnter = (room) => () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield GomokuStore_1.Gomoku.enterRoom(room.id);
                GomokuStore_1.Gomoku.push('Board');
            }
            catch (e) {
                this.set(e + '');
            }
        });
        this.handlePress = (key) => {
            switch (key.toUpperCase()) {
                case 'R':
                    this.handleRefresh();
                    break;
                case 'N':
                    this.handleNew();
                    break;
            }
        };
    }
    set(error = this.error, loading = this.loading) {
        this.error = error;
        this.loading = loading;
    }
    componentDidMount() {
        this.refreshTimer = setInterval(this.handleRefresh, consts_1.T_SECOND * 10);
        this.handleRefresh();
    }
    componentWillUnmount() {
        clearInterval(this.refreshTimer);
    }
    render() {
        return (React.createElement(Focusable_1.FocusableContainer, null,
            React.createElement(React.Fragment, null,
                React.createElement(KeyboardReceiver_1.KeyboardReceiver, { focus: true, keys: this.keys, onPress: this.handlePress }),
                React.createElement(ink_1.Text, { bold: true },
                    "RoomList(",
                    GomokuStore_1.Gomoku.meta.count,
                    ")"),
                React.createElement(ink_1.Box, { height: 14, margin: 1, flexDirection: "column" },
                    GomokuStore_1.Gomoku.rooms.map((room, index) => {
                        const id = ` ∙ [${numberFormat_1.itos(room.id)}] `;
                        let user = `u(${room.players[0] ? room.players[0].id : '-'})`;
                        user += ' ⬌ ';
                        user += `u(${room.players[1] ? room.players[1].id : '-'}) `;
                        return (React.createElement(Focusable_1.Focusable, { y: index + 1, x: 0, key: index, width: 38, focusProps: Focusable_1.inputFocusProps },
                            React.createElement(KeyboardReceiver_1.KeyboardReceiver, { onEnter: this.handleEnter(room) },
                                React.createElement(ink_1.Color, { red: !!room.game, green: room.players.indexOf(null) > -1, gray: !room.game && room.players.indexOf(null) === -1 }, lodash_1.padEnd(id, 38 - user.length, ' ')),
                                React.createElement(ink_1.Box, null, user))));
                    }),
                    React.createElement(Focusable_1.Focusable, { y: 6, x: 0, width: 38, focusProps: Focusable_1.inputFocusProps, marginTop: 1, cyan: true },
                        React.createElement(KeyboardReceiver_1.KeyboardReceiver, { onEnter: this.handleNew }, lodash_1.pad('New (N)', 38, ' ')))),
                React.createElement(ink_1.Color, { gray: !this.error && !this.loading, red: !!this.error && !this.loading }, this.loading
                    ? 'LoadingScene...'
                    : this.error
                        ? this.error
                        : 'Press R to refresh room list.'))));
    }
};
tslib_1.__decorate([
    mobx_1.observable
], RoomListScene.prototype, "error", void 0);
tslib_1.__decorate([
    mobx_1.observable
], RoomListScene.prototype, "loading", void 0);
tslib_1.__decorate([
    mobx_1.action
], RoomListScene.prototype, "set", null);
RoomListScene = tslib_1.__decorate([
    custom_1.observer
], RoomListScene);
exports.RoomListScene = RoomListScene;
