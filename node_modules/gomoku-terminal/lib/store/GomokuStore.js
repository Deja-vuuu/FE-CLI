"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-04-12 16:18:50
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const mobx_1 = require("mobx");
const mobx_async_action_1 = require("mobx-async-action");
const consts_1 = require("monofile-utilities/lib/consts");
const enum_1 = require("monofile-utilities/lib/enum");
const query_string_1 = require("monofile-utilities/lib/query-string");
const log_1 = require("../utils/misc/log");
const api_1 = require("../utils/service/api");
const SocketClient_1 = require("../utils/socket/SocketClient");
const types_1 = require("../utils/socket/types");
exports.Paths = enum_1.Enum({
    Loading: '',
    Login: '',
    RoomList: '',
    Profile: '',
    Board: '',
});
class GomokuStore {
    constructor() {
        this.path = exports.Paths.Loading;
        this.rooms = mobx_1.observable.array();
        this.meta = {
            prefab: consts_1.ANY,
            count: 0,
            freeCount: 0,
            busyCount: 0,
        };
        this.listRoom = mobx_async_action_1.asyncAction(() => this.socket.request('room.list', { prefabId: this.meta.prefab.id }), (data) => {
            this.rooms.replace(data.rooms);
            this.meta.count = data.count;
        });
        this.enterRoom = mobx_async_action_1.asyncAction((roomId) => this.socket.request('room.enter', {
            roomId: roomId === -1 ? void 0 : roomId,
            prefabId: roomId ? void 0 : this.meta.prefab.id,
        }), (room) => {
            this.room = room;
        });
    }
    push(path) {
        this.path = path;
    }
    initSocket() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const token = yield api_1.gomokuGetAccessToken({});
            this.socket = new SocketClient_1.SocketClient({
                url: query_string_1.appendQuery(token.address, { token: token.token }),
            });
            this.socket.connect();
            yield mobx_1.when(() => this.socket.status === 'connected');
            const meta = yield this.socket.request('room.listPrefab');
            this.meta = meta[0];
            if (__DEV__) {
                this.socket.on(types_1.SocketEvents.Message, (msg) => {
                    if (msg && 'kind' in msg) {
                        log_1.debug('socket message', msg.kind + msg.id, msg.key, msg.data);
                    }
                });
                this.socket.on(types_1.SocketEvents.Send, (kind, key, data, id) => {
                    log_1.debug('socket send', kind + id, key, data);
                });
            }
        });
    }
    inject() {
        return (exports.Gomoku = this);
    }
}
tslib_1.__decorate([
    mobx_1.observable
], GomokuStore.prototype, "path", void 0);
tslib_1.__decorate([
    mobx_1.observable
], GomokuStore.prototype, "meta", void 0);
tslib_1.__decorate([
    mobx_1.observable
], GomokuStore.prototype, "room", void 0);
tslib_1.__decorate([
    mobx_1.action
], GomokuStore.prototype, "push", null);
exports.GomokuStore = GomokuStore;
