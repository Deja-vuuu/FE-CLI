/*!
 *
 * Copyright 2017 - acrazing
 *
 * @author acrazing joking.young@gmail.com
 * @since 2017-11-28 17:31:44
 * @version 1.0.0
 * @desc sync.ts
 */
import { autorun, toJS } from 'mobx';
import { noop } from 'monofile-utilities/lib/consts';
import { KeyActionName, KeyDefaultKey } from './keys';
import { parseStore } from './parse-store';
var SyncTrunk = /** @class */ (function () {
    function SyncTrunk(store, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.storage, storage = _c === void 0 ? localStorage : _c, _d = _b.storageKey, storageKey = _d === void 0 ? KeyDefaultKey : _d, _e = _b.delay, delay = _e === void 0 ? 0 : _e, _f = _b.onError, onError = _f === void 0 ? noop : _f;
        this.store = store;
        this.storage = storage;
        this.storageKey = storageKey;
        this.delay = delay;
        this.onError = onError;
    }
    SyncTrunk.prototype.persist = function () {
        try {
            this.storage.setItem(this.storageKey, JSON.stringify(toJS(this.store)));
        }
        catch (error) {
            this.onError(error);
        }
    };
    /**
     * init the store
     */
    SyncTrunk.prototype.init = function (initialState) {
        try {
            var data = this.storage.getItem(this.storageKey);
            if (data) {
                parseStore(this.store, JSON.parse(data), false);
            }
        }
        catch (_a) {
            // DO nothing
        }
        if (initialState) {
            parseStore(this.store, initialState, true);
        }
        // persist before listen change
        this.persist();
        this.disposer = autorun(this.persist.bind(this), {
            name: KeyActionName,
            delay: this.delay,
            onError: this.onError,
        });
    };
    SyncTrunk.prototype.clear = function () {
        this.storage.removeItem(this.storageKey);
    };
    SyncTrunk.prototype.updateStore = function (store) {
        this.store = store;
        this.persist();
    };
    return SyncTrunk;
}());
export { SyncTrunk };
//# sourceMappingURL=sync.js.map