/*!
 *
 * Copyright 2017 - acrazing
 *
 * @author acrazing joking.young@gmail.com
 * @since 2017-11-28 17:31:44
 * @version 1.0.0
 * @desc async.ts
 */
import { __awaiter, __generator } from "tslib";
import { autorun, toJS } from 'mobx';
import { noop } from 'monofile-utilities/lib/consts';
import { KeyActionName, KeyDefaultKey } from './keys';
import { parseStore } from './parse-store';
var AsyncTrunk = /** @class */ (function () {
    function AsyncTrunk(store, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.storage, storage = _c === void 0 ? localStorage : _c, _d = _b.storageKey, storageKey = _d === void 0 ? KeyDefaultKey : _d, _e = _b.delay, delay = _e === void 0 ? 0 : _e, _f = _b.onError, onError = _f === void 0 ? noop : _f;
        this.store = store;
        this.storage = storage;
        this.storageKey = storageKey;
        this.delay = delay;
        this.onError = onError;
    }
    AsyncTrunk.prototype.persist = function () {
        return __awaiter(this, void 0, void 0, function () {
            var reason_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.storage.setItem(this.storageKey, JSON.stringify(toJS(this.store)))];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        reason_1 = _a.sent();
                        this.onError(reason_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * init the trunk async
     */
    AsyncTrunk.prototype.init = function (initialState) {
        return __awaiter(this, void 0, void 0, function () {
            var data, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.storage.getItem(this.storageKey)];
                    case 1:
                        data = _b.sent();
                        if (data) {
                            parseStore(this.store, JSON.parse(data), false);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 3:
                        if (initialState) {
                            parseStore(this.store, initialState, true);
                        }
                        // persist before listen change
                        this.persist();
                        this.disposer = autorun(this.persist.bind(this), {
                            name: KeyActionName,
                            delay: this.delay,
                            onError: this.onError,
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    AsyncTrunk.prototype.clear = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.storage.removeItem(this.storageKey)];
            });
        });
    };
    AsyncTrunk.prototype.updateStore = function (store) {
        this.store = store;
        return this.persist();
    };
    return AsyncTrunk;
}());
export { AsyncTrunk };
//# sourceMappingURL=async.js.map