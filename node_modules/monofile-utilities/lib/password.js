"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-02-16 11:19:26
 */
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
/**
 * create a hashed password, please note this is faster than bcrypt.
 * @param password
 * @param algorithm
 * @param encoding
 */
function encrypt(password, algorithm = 'sha256', encoding = 'hex') {
    const salt = Math.floor(Number.MAX_SAFE_INTEGER * (1 + Math.random()))
        .toString(36)
        .padEnd(12, '0')
        .substr(0, 12);
    return (salt +
        ':' +
        algorithm +
        ':' +
        crypto_1.createHash(algorithm)
            .update(salt + '.' + password)
            .digest(encoding));
}
exports.encrypt = encrypt;
/**
 * check input is correct or not
 * @param input
 * @param encrypted
 */
function compare(input, encrypted) {
    if (typeof encrypted !== 'string' || typeof input !== 'string') {
        return false;
    }
    const [, salt, algorithm, digest] = encrypted.match(/^([^:]+):([^:]+):(.+)$/) || [];
    if (!salt || !algorithm || !digest) {
        return false;
    }
    const hash = crypto_1.createHash(algorithm)
        .update(salt + '.' + input)
        .digest();
    if (digest.length === hash.byteLength * 2) {
        return digest === hash.toString('hex');
    }
    else {
        return digest === hash.toString('base64');
    }
}
exports.compare = compare;
//# sourceMappingURL=password.js.map