"use strict";
/*!
 *
 * Copyright 2017 - acrazing
 *
 * @author acrazing joking.young@gmail.com
 * @since 2017-12-15 13:14:45
 * @version 1.0.0
 * @desc append-query.ts
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const set_1 = tslib_1.__importDefault(require("lodash/set"));
const consts_1 = require("./consts");
/**
 * parse query object deeply
 * @param query
 */
function parse(query) {
    if (!query) {
        return {};
    }
    const out = {};
    if (!query) {
        return out;
    }
    query.split('&').forEach((item) => {
        const [name, value] = item.split('=', 2);
        // This will replace a.b.c/a[b][c] to {a: {b: {c: <value>}}}
        set_1.default(out, decodeURIComponent(name), decodeURIComponent(value || ''));
    });
    return out;
}
exports.parse = parse;
/**
 * serialize a object to query string
 * @param query
 * @param scope
 * @return {string}
 */
function stringify(query = {}, scope = '') {
    let key;
    let value;
    let out = '';
    Object.keys(query).forEach((name) => {
        key = scope ? `${scope}[${name}]` : name;
        value = query[name];
        if (value === void 0) {
            return;
        }
        value === consts_1.NULL && (value = '');
        if (typeof value === 'object') {
            out += stringify(value, key);
        }
        else {
            out += `&${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
        }
    });
    return scope ? out : out.substr(1);
}
exports.stringify = stringify;
/**
 * append query to a url
 * @param link
 * @param query
 * @return {string}
 */
function appendQuery(link, query) {
    if (query && typeof query !== 'string') {
        query = stringify(query);
    }
    return query ? (link + '&' + query).replace(/[&?]+/, '?') : link;
}
exports.appendQuery = appendQuery;
//# sourceMappingURL=query-string.js.map