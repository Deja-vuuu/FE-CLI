/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-03-01 22:01:35
 */
import { __awaiter, __generator } from "tslib";
import { Backoff } from './Backoff';
describe('backoff', function () {
    var _this = this;
    it('should execute functions with backoff', function () { return __awaiter(_this, void 0, void 0, function () {
        var count, fn, value, error, e_1, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    count = 4;
                    fn = jest.fn(function (p) {
                        if (count-- < 0) {
                            return p;
                        }
                        else {
                            throw p;
                        }
                    });
                    value = 0;
                    error = 0;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, new Backoff(10, 1).exec(fn, 1)];
                case 2:
                    value = _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _a.sent();
                    error = e_1;
                    return [3 /*break*/, 4];
                case 4:
                    expect(value).toBe(1);
                    expect(error).toBe(0);
                    expect(fn).toBeCalledTimes(6);
                    count = 4;
                    value = 0;
                    error = 0;
                    fn.mockClear();
                    _a.label = 5;
                case 5:
                    _a.trys.push([5, 7, , 8]);
                    return [4 /*yield*/, new Backoff(3, 1).exec(fn, 1)];
                case 6:
                    value = _a.sent();
                    return [3 /*break*/, 8];
                case 7:
                    e_2 = _a.sent();
                    error = e_2;
                    return [3 /*break*/, 8];
                case 8:
                    expect(value).toBe(0);
                    expect(error).toBe(1);
                    expect(fn).toBeCalledTimes(4);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=Backoff.spec.js.map