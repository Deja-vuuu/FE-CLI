"use strict";
/*!
 * Copyright 2018 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2018-08-30 20:02:51
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
class Rejected {
    constructor(reason) {
        this.reason = reason;
    }
}
exports.Rejected = Rejected;
/**
 * memoize promise version
 * @param creator
 * @param mode
 * @param getKey
 */
function memorizePromise(creator, mode = 'once-success', getKey = String) {
    let caches = {};
    const proto = {
        cache: caches,
        has: (key) => caches.hasOwnProperty(key),
        status: (key) => caches.hasOwnProperty(key)
            ? caches[key] instanceof Promise
                ? 'pending'
                : caches[key] instanceof Rejected
                    ? 'rejected'
                    : 'fulfilled'
            : 'unknown',
        get: (key) => {
            return !caches.hasOwnProperty(key) ||
                caches[key] instanceof Promise ||
                caches[key] instanceof Rejected
                ? void 0
                : caches[key];
        },
        remove: (key) => delete caches[key],
        clear: () => (caches = proto.cache = {}),
        keys: () => Object.keys(caches),
    };
    const func = (...args) => {
        const key = getKey(...args);
        if (!caches[key]) {
            const ret = (caches[key] = Promise.resolve(creator(...args)));
            switch (mode) {
                case 'once':
                    ret.then((data) => (caches[key] = data), (reason) => (caches[key] = new Rejected(reason)));
                    break;
                case 'once-success':
                    ret.then((data) => (caches[key] = data), () => delete caches[key]);
                    break;
                case 'parallel':
                    ret.then(() => delete caches[key], () => delete caches[key]);
                    break;
            }
        }
        return caches[key];
    };
    return tslib_1.__assign(func, proto);
}
exports.memorizePromise = memorizePromise;
//# sourceMappingURL=memorize-promise.js.map