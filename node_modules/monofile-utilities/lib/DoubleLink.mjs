/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-02-10 20:39:59
 *
 * Double linked list
 */
var DoubleLinkItem = /** @class */ (function () {
    function DoubleLinkItem() {
    }
    return DoubleLinkItem;
}());
export { DoubleLinkItem };
var DoubleLinkNode = /** @class */ (function () {
    function DoubleLinkNode(value) {
        this.value = value;
    }
    return DoubleLinkNode;
}());
export { DoubleLinkNode };
var DoubleLink = /** @class */ (function () {
    function DoubleLink() {
        this.head = undefined;
        this.count = 0;
    }
    DoubleLink.prototype.has = function (item) {
        return item.list === this;
    };
    DoubleLink.prototype.assertBelong = function (item, allowDangle) {
        if ((!item.list && !allowDangle) || (item.list && item.list !== this)) {
            throw new ReferenceError('operating item does not belong to current list');
        }
    };
    DoubleLink.prototype.drop = function (item) {
        this.assertBelong(item, false);
        this.count -= 1;
        if (this.count === 0) {
            this.head = item.prev = item.next = item.list = void 0;
            return;
        }
        if (item === this.head) {
            this.head = item.next;
        }
        item.next.prev = item.prev;
        item.prev.next = item.next;
        item.prev = item.next = item.list = void 0;
    };
    DoubleLink.prototype.prepare = function (item) {
        if (item.list) {
            item.prev.next = item.next;
            item.next.prev = item.prev;
        }
        else {
            ['list', 'prev', 'next'].forEach(function (key) {
                Object.defineProperty(item, key, {
                    enumerable: false,
                    configurable: true,
                    writable: true,
                    value: void 0,
                });
            });
            item.list = this;
            item.prev = item.next = item;
            this.count += 1;
        }
        if (!this.head) {
            this.head = item;
        }
    };
    DoubleLink.prototype.prepend = function (item) {
        this.assertBelong(item, true);
        if (this.head === item) {
            return;
        }
        this.prepare(item);
        if (this.head === item) {
            return;
        }
        this.head.prev.next = item;
        item.prev = this.head.prev;
        item.next = this.head;
        this.head.prev = item;
        this.head = item;
    };
    DoubleLink.prototype.append = function (item) {
        this.assertBelong(item, true);
        if (this.head && this.head.prev === item) {
            return;
        }
        this.prepare(item);
        if (this.head === item) {
            return;
        }
        this.head.prev.next = item;
        item.prev = this.head.prev;
        item.next = this.head;
        this.head.prev = item;
    };
    DoubleLink.prototype.forEach = function (callback) {
        if (!this.head) {
            return;
        }
        var index = 0;
        var item = this.head;
        while (callback(item, index++) !== false) {
            if ((item = item.next) === this.head) {
                break;
            }
        }
    };
    DoubleLink.prototype.map = function (callback) {
        var r = [];
        this.forEach(function (item, index) { return r.push(callback(item, index)); });
        return r;
    };
    DoubleLink.prototype.find = function (callback) {
        var item = void 0;
        this.forEach(function (item1, index) {
            if (callback(item1, index)) {
                item = item1;
                return false;
            }
            return true;
        });
        return item;
    };
    DoubleLink.prototype.items = function (count) {
        if (count === void 0) { count = 0; }
        if (count === 0) {
            return this.map(function (item) { return item; });
        }
        var r = [];
        this.forEach(function (item, index) {
            if (index >= count) {
                return false;
            }
            r.push(item);
            return;
        });
        return r;
    };
    return DoubleLink;
}());
export { DoubleLink };
//# sourceMappingURL=DoubleLink.js.map