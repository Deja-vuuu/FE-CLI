/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-03-30 20:07:23
 *
 * run benchmark suite automatically, two usage way:
 *
 * 1. in foo.js
 *    bench(module)
 *    then run `node foo.js` in terminal
 *
 * 2. in terminal
 *    bench foo.js
 *
 * the foo.js should exports some variables instanceof benchmark.Suite
 */
var e_1, _a, e_2, _b;
import { __values } from "tslib";
import { Suite } from 'benchmark';
import * as G from 'glob';
import * as path from 'path';
function cycle(event) {
    console.log(this.name + ' -> ' + event.target);
}
function complete() {
    console.log('Fastest is ' + this.filter('fastest').map('name'));
    this.off('cycle', cycle);
    this.off('complete', complete);
}
function execute(exports, filename) {
    for (var key in exports) {
        if (exports.hasOwnProperty(key)) {
            var suite = exports[key];
            if (!(suite instanceof Suite)) {
                continue;
            }
            if (!suite.name) {
                suite.name = path.basename(filename).replace(/\..*$/, '');
            }
            suite.on('cycle', cycle);
            suite.on('complete', complete);
            suite.run();
        }
    }
}
export function bench(module) {
    if (!module.parent) {
        execute(module.exports, module.filename);
    }
}
if (!module.parent) {
    var argv = process.argv;
    var inputs = argv.length > 2 ? argv.slice(2) : ['./src/**/*.bench.*'];
    var called = {};
    try {
        for (var inputs_1 = __values(inputs), inputs_1_1 = inputs_1.next(); !inputs_1_1.done; inputs_1_1 = inputs_1.next()) {
            var pattern = inputs_1_1.value;
            var files = G.sync(pattern);
            try {
                for (var files_1 = (e_2 = void 0, __values(files)), files_1_1 = files_1.next(); !files_1_1.done; files_1_1 = files_1.next()) {
                    var file = files_1_1.value;
                    if (!called[file]) {
                        called[file] = true;
                        var filename = path.join(process.cwd(), file);
                        execute(require(filename), filename);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (files_1_1 && !files_1_1.done && (_b = files_1.return)) _b.call(files_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (inputs_1_1 && !inputs_1_1.done && (_a = inputs_1.return)) _a.call(inputs_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
//# sourceMappingURL=bench.js.map