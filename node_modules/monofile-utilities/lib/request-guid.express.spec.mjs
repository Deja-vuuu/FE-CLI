/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-01-25 20:30:49
 */
import { __awaiter, __generator } from "tslib";
import e from 'express';
import fetch from 'node-fetch';
import { GUID_RE } from './request-guid';
import { requestGuid } from './request-guid.express';
describe('express middleware', function () {
    var _this = this;
    it('should set header correctly', function () { return __awaiter(_this, void 0, void 0, function () {
        var header, from;
        return __generator(this, function (_a) {
            header = 'x-request-id-2';
            from = 'AAAAAAAA-AAAAAAAA-AAAAAAAA-AAAAAAAA';
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var app = e();
                    app.use(requestGuid({
                        secret: '13456789abcdef0',
                        trustHeader: true,
                        name: 'id',
                        header: header,
                    }));
                    app.get('/', function (req, res) {
                        expect(req.id).toMatch(GUID_RE);
                        res.end('');
                    });
                    var srv = app.listen(2345, '127.0.0.1', function () {
                        new Promise(function (resolve) { return setTimeout(resolve, 0); })
                            .then(function () {
                            return fetch('http://127.0.0.1:2345/').then(function (r) {
                                expect(r.headers.get(header)).toMatch(GUID_RE);
                                expect(r.headers.get(header)).not.toBe(from);
                            });
                        })
                            .then(function () {
                            var _a;
                            return fetch('http://127.0.0.1:2345/', {
                                headers: (_a = {}, _a[header] = from, _a),
                            }).then(function (r) {
                                expect(r.headers.get(header)).toBe(from);
                            });
                        })
                            .then(resolve, reject)
                            .then(function () {
                            srv.close();
                        });
                    });
                })];
        });
    }); });
});
//# sourceMappingURL=request-guid.express.spec.js.map