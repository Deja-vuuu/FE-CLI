/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-03-29 14:02:20
 */
import { __read } from "tslib";
var bits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_';
var locs = new Uint8Array(127).fill(0xff);
var p2radix = {
    2: [1, 1, 0x80000000],
    4: [2, 3, 1 << 30],
    8: [3, 7, 1 << 30],
    16: [4, 15, 1 << 28],
    32: [5, 31, 1 << 30],
    64: [6, 63, 1 << 30],
};
for (var i = 0; i < bits.length; i++) {
    locs[bits.charCodeAt(i)] = i;
}
var i53tob2ps = function (i, radix) {
    var o = '';
    var _a = __read(p2radix[radix], 3), b = _a[0], m = _a[1], s = _a[2];
    var high = (i / s) | 0;
    var low = i % s;
    while (low !== 0) {
        o = bits.charAt(low & m) + o;
        low >>= b;
    }
    while (high !== 0) {
        o = bits.charAt(high & m) + o;
        high >>= b;
    }
    return o;
};
function i31tob2ps(i, radix) {
    var o = '';
    var _a = __read(p2radix[radix], 2), b = _a[0], m = _a[1];
    while (i !== 0) {
        o = bits.charAt(i & m) + o;
        i >>= b;
    }
    return o;
}
/**
 * integer to string
 * @param i
 * @param radix
 * @return {string} always fine
 */
export function itos(i, radix) {
    if (radix === void 0) { radix = 64; }
    if (i === 0) {
        return '0';
    }
    var prev = '';
    if (i < 0) {
        prev = '-';
        i = -i;
    }
    if (p2radix[radix]) {
        if (i < 0x80000000) {
            return prev + i31tob2ps(i, radix);
        }
        return prev + i53tob2ps(i, radix);
    }
    var o = '';
    while (i !== 0) {
        o = bits.charAt(i % radix) + o;
        i = Math.floor(i / radix);
    }
    return prev + o;
}
var caches = [];
for (var i = 2; i < 65; i++) {
    var max = Math.ceil(Math.log(Number.MAX_SAFE_INTEGER) / Math.log(i));
    caches.push(new Float64Array(max));
    for (var j = 0; j < max; j++) {
        caches[i - 2][j] = Math.pow(i, j);
    }
}
/**
 * string to integer
 * @param s
 * @param radix
 * @return {number} finite number if format is correct, else is NaN
 */
export function stoi(s, radix) {
    if (radix === void 0) { radix = 64; }
    var o = 0;
    var start = s.length - 1;
    var end = -1;
    if (s.charAt(0) === '-') {
        end = 0;
    }
    var cache = caches[radix - 2];
    for (var i = start; i > end; i--) {
        var p = locs[s.charCodeAt(i)];
        if (p >= radix) {
            return NaN;
        }
        o += cache[start - i] * p;
    }
    return end === 0 ? -o : o;
}
var fn = function () { return ''; };
/**
 * create an unique id generator
 * @param min
 * @param max
 * @param prefix
 * @param radix
 */
export function uid(min, max, prefix, radix) {
    if (min === void 0) { min = 1; }
    if (max === void 0) { max = Math.pow(64, 2) - 1; }
    if (prefix === void 0) { prefix = fn; }
    if (radix === void 0) { radix = 64; }
    var id = min - 1;
    return function () {
        id = id + 1;
        if (id > max) {
            id = min;
        }
        return prefix() + itos(id, radix);
    };
}
//# sourceMappingURL=numberFormat.js.map