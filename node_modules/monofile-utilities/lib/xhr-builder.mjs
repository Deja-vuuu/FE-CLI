/*!
 * Copyright 2018 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2018-07-30 17:38:17
 */
import { __assign, __extends, __read } from "tslib";
import { noop } from './consts';
import { isIE } from './detect-ie';
import { isBlob, isBufferSource, isFormData } from './is';
import { appendQuery, stringify } from './query-string';
function formatUrl(url, dropQuery) {
    if (/{[^}]+}/.test(url)) {
        return function (query, body) {
            return url.replace(/{([^}]+)}/g, function (_, $1) {
                var _a = __read($1.split(':'), 2), name = _a[0], defaults = _a[1];
                if (body && name in body) {
                    var value = body[name];
                    if (dropQuery === true || dropQuery === 'body') {
                        delete body[name];
                    }
                    return value;
                }
                if (query && name in query) {
                    var value = query[name];
                    if (dropQuery === true || dropQuery === 'query') {
                        delete query[name];
                    }
                    return value;
                }
                if (defaults !== void 0) {
                    return defaults;
                }
                throw new Error("path parameter \"" + name + "\" is required!");
            });
        };
    }
    return function () { return url; };
}
var XhrError = /** @class */ (function (_super) {
    __extends(XhrError, _super);
    function XhrError(status, code, stage, message) {
        var _newTarget = this.constructor;
        if (status === void 0) { status = 0; }
        if (code === void 0) { code = 0; }
        if (stage === void 0) { stage = 'init'; }
        if (message === void 0) { message = ''; }
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf && Object.setPrototypeOf(_this, _newTarget.prototype);
        _this.name = 'XMLHttpRequestError';
        _this.status = status;
        _this.code = code;
        _this.stage = stage;
        _this.message = message;
        return _this;
    }
    return XhrError;
}(Error));
export { XhrError };
var XhrBuilder = /** @class */ (function () {
    function XhrBuilder(_a) {
        var host = _a.host, _b = _a.headers, headers = _b === void 0 ? {} : _b, _c = _a.dropQuery, dropQuery = _c === void 0 ? false : _c, _d = _a.contentType, contentType = _d === void 0 ? 'application/json' : _d, _e = _a.hijackIE, hijackIE = _e === void 0 ? true : _e, _f = _a.handleUnexpectedStatus, handleUnexpectedStatus = _f === void 0 ? function (xhr) {
            return new XhrError(xhr.status, 0, 'response', 'invalid response status');
        } : _f, _g = _a.parseResponseText, parseResponseText = _g === void 0 ? function (text) {
            if (!text) {
                return void 0;
            }
            return JSON.parse(text);
        } : _g, _h = _a.handleResponseData, handleResponseData = _h === void 0 ? noop : _h, _j = _a.withCredentials, withCredentials = _j === void 0 ? true : _j;
        this.host =
            typeof host === 'function'
                ? host
                : function (url) {
                    return url.indexOf('http://') === 0 || url.indexOf('https://') === 0
                        ? url
                        : "" + host + url;
                };
        this.config = {
            headers: headers,
            dropQuery: dropQuery,
            contentType: contentType,
            hijackIE: hijackIE,
            handleUnexpectedStatus: handleUnexpectedStatus,
            parseResponseText: parseResponseText,
            handleResponseData: handleResponseData,
            withCredentials: withCredentials,
        };
    }
    XhrBuilder.prototype.build = function (method, url, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        method = method.toUpperCase();
        var withBody = method === 'POST' || method === 'PUT' || method === 'PATCH';
        options.headers = options.headers || {};
        var _a = __assign(__assign({}, this.config), options), dropQuery = _a.dropQuery, handleResponseData = _a.handleResponseData, parseResponseText = _a.parseResponseText, handleUnexpectedStatus = _a.handleUnexpectedStatus, contentType = _a.contentType, withCredentials = _a.withCredentials;
        var headers = __assign(__assign({}, this.config.headers), options.headers);
        var api = formatUrl(this.host(url), dropQuery);
        return function (input, query) {
            return new Promise(function (resolve, reject) {
                query = withBody ? query : input;
                var body = withBody ? input : void 0;
                var xhr = new XMLHttpRequest();
                var url = appendQuery(api(query, body), query);
                if (_this.config.hijackIE && isIE) {
                    url = appendQuery(url, { _: +new Date() });
                }
                xhr.open(method, url, true);
                xhr.withCredentials = withCredentials;
                for (var key in headers) {
                    if (headers.hasOwnProperty(key)) {
                        xhr.setRequestHeader(key, headers[key]);
                    }
                }
                var bodyData = null;
                if (withBody && body) {
                    var content = void 0;
                    if (isFormData(body)) {
                        bodyData = body;
                        content = 'multipart/formdata';
                    }
                    else if (isBlob(body) || isBufferSource(body)) {
                        bodyData = body;
                        content = 'application/octet-stream';
                    }
                    else if (typeof body === 'string') {
                        bodyData = body;
                        content = 'text/plain';
                    }
                    else if (contentType === 'application/json') {
                        bodyData = JSON.stringify(body);
                        content = contentType;
                    }
                    else {
                        bodyData = stringify(body);
                        content = contentType;
                    }
                    xhr.setRequestHeader('Content-Type', content);
                }
                xhr.onabort = function () {
                    reject(new XhrError(0, 0, 'request', 'aborted'));
                };
                xhr.ontimeout = function () {
                    reject(new XhrError(0, 0, 'request', 'timeout'));
                };
                xhr.onerror = function (err) {
                    reject(new XhrError(0, 0, 'request', err.toString()));
                };
                xhr.onload = function () {
                    if (xhr.status < 200 || xhr.status > 299) {
                        reject(handleUnexpectedStatus(xhr));
                        return;
                    }
                    try {
                        var raw = parseResponseText(xhr.responseText, xhr);
                        try {
                            var data = handleResponseData(raw) || raw;
                            resolve(data);
                        }
                        catch (e) {
                            reject(e instanceof XhrError
                                ? e
                                : new XhrError(xhr.status, 0, 'process', e.message));
                        }
                    }
                    catch (e) {
                        reject(e instanceof XhrError
                            ? e
                            : new XhrError(xhr.status, 0, 'parse', e.message));
                    }
                };
                xhr.send(bodyData);
            }).catch(function (e) {
                if (e instanceof XhrError) {
                    throw e;
                }
                else {
                    throw new XhrError(0, 0, 'init', e.message);
                }
            });
        };
    };
    XhrBuilder.prototype.get = function (url, options) {
        return this.build('get', url, options);
    };
    XhrBuilder.prototype.delete = function (url, options) {
        return this.build('delete', url, options);
    };
    XhrBuilder.prototype.head = function (url, options) {
        return this.build('head', url, options);
    };
    XhrBuilder.prototype.options = function (url, options) {
        return this.build('options', url, options);
    };
    XhrBuilder.prototype.post = function (url, options) {
        return this.build('post', url, options);
    };
    XhrBuilder.prototype.put = function (url, options) {
        return this.build('put', url, options);
    };
    XhrBuilder.prototype.patch = function (url, options) {
        return this.build('patch', url, options);
    };
    return XhrBuilder;
}());
export { XhrBuilder };
//# sourceMappingURL=xhr-builder.js.map