/*!
 *
 * Copyright 2017 - acrazing
 *
 * @author acrazing joking.young@gmail.com
 * @since 2017-12-15 13:14:45
 * @version 1.0.0
 * @desc append-query.ts
 */
import { __read } from "tslib";
import set from 'lodash/set';
import { NULL } from './consts';
/**
 * parse query object deeply
 * @param query
 */
export function parse(query) {
    if (!query) {
        return {};
    }
    var out = {};
    if (!query) {
        return out;
    }
    query.split('&').forEach(function (item) {
        var _a = __read(item.split('=', 2), 2), name = _a[0], value = _a[1];
        // This will replace a.b.c/a[b][c] to {a: {b: {c: <value>}}}
        set(out, decodeURIComponent(name), decodeURIComponent(value || ''));
    });
    return out;
}
/**
 * serialize a object to query string
 * @param query
 * @param scope
 * @return {string}
 */
export function stringify(query, scope) {
    if (query === void 0) { query = {}; }
    if (scope === void 0) { scope = ''; }
    var key;
    var value;
    var out = '';
    Object.keys(query).forEach(function (name) {
        key = scope ? scope + "[" + name + "]" : name;
        value = query[name];
        if (value === void 0) {
            return;
        }
        value === NULL && (value = '');
        if (typeof value === 'object') {
            out += stringify(value, key);
        }
        else {
            out += "&" + encodeURIComponent(key) + "=" + encodeURIComponent(value);
        }
    });
    return scope ? out : out.substr(1);
}
/**
 * append query to a url
 * @param link
 * @param query
 * @return {string}
 */
export function appendQuery(link, query) {
    if (query && typeof query !== 'string') {
        query = stringify(query);
    }
    return query ? (link + '&' + query).replace(/[&?]+/, '?') : link;
}
//# sourceMappingURL=query-string.js.map