/*!
 *
 * Copyright 2017 - acrazing
 *
 * @author acrazing joking.young@gmail.com
 * @since 2017-12-15 12:29:38
 * @version 1.0.0
 * @desc storage.ts
 */
var CookieStorage = /** @class */ (function () {
    function CookieStorage() {
    }
    CookieStorage.prototype.get = function (name, defaults) {
        var key = encodeURIComponent(name);
        var matches = document.cookie.match(new RegExp("(?:^|; )" + key.replace(/[.*()]/g, '\\$&') + "=([^;]*)"));
        var result = matches ? decodeURIComponent(matches[1]) : defaults;
        try {
            return JSON.parse(result);
        }
        catch (e) {
            return result;
        }
    };
    CookieStorage.prototype.set = function (name, value, opts) {
        if (opts === void 0) { opts = {}; }
        typeof value === 'string' || (value = JSON.stringify(value));
        var cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
        opts.maxAge && (cookie += '; Max-Age=' + opts.maxAge);
        typeof opts.expires === 'number' && (opts.expires =
            new Date(+new Date + opts.expires * 1e3));
        opts.expires instanceof Date && (cookie +=
            "; Expires=" + opts.expires.toUTCString());
        opts.path && (cookie += '; Path=' + opts.path);
        opts.domain && (cookie += '; Domain=' + opts.domain);
        opts.secure && (cookie += '; Secure');
        opts.httpOnly && (cookie += '; HttpOnly');
        document.cookie = cookie;
        return this;
    };
    CookieStorage.prototype.remove = function (name) {
        this.set(name, '', { maxAge: 0 });
        return this;
    };
    return CookieStorage;
}());
export { CookieStorage };
var LocalStorage = /** @class */ (function () {
    function LocalStorage() {
    }
    LocalStorage.prototype.get = function (name, defaults) {
        var result = localStorage.getItem(name);
        result === null && (result = void 0);
        try {
            var data = JSON.parse(result);
            if (!data || !data.hasOwnProperty('__')) {
                // could be parse, but not internal value
                // return the value
                return data === void 0 ? defaults : data;
            }
            if (data.expires && data.expires < +new Date) {
                localStorage.removeItem(name);
                return defaults;
            }
            return data.data;
        }
        catch (e) {
            return result === void 0 ? defaults : result;
        }
    };
    LocalStorage.prototype.set = function (name, value, opts) {
        if (opts === void 0) { opts = {}; }
        var data = {
            __: true,
            data: value,
        };
        opts.expires && (data.expires = opts.expires instanceof Date
            ? +opts.expires : (+new Date + opts.expires * 1e3));
        localStorage.removeItem(name);
        localStorage.setItem(name, JSON.stringify(data));
        return this;
    };
    LocalStorage.prototype.remove = function (name) {
        localStorage.removeItem(name);
        return this;
    };
    return LocalStorage;
}());
export { LocalStorage };
var NoopStorage = /** @class */ (function () {
    function NoopStorage() {
    }
    NoopStorage.prototype.get = function (_name, defaults) {
        return defaults;
    };
    NoopStorage.prototype.set = function () {
        return this;
    };
    NoopStorage.prototype.remove = function () {
        return this;
    };
    return NoopStorage;
}());
export { NoopStorage };
export var hasLocal = typeof window !== 'undefined'
    && !!window.localStorage
    && !!window.localStorage.getItem
    && !!window.localStorage.setItem
    && !!window.localStorage.removeItem;
var noop = new NoopStorage();
export var cookie = new CookieStorage();
export var local = hasLocal ? new LocalStorage() : noop;
export var storage = hasLocal ? local : cookie;
//# sourceMappingURL=storage.js.map