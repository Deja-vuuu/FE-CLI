/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-11-28 17:55:28
 */
import { __read, __spread } from "tslib";
var EventDispatcher = /** @class */ (function () {
    function EventDispatcher() {
        this.__events = Object.create(null);
    }
    EventDispatcher.prototype.eventNames = function () {
        return Object.keys(this.__events);
    };
    EventDispatcher.prototype.eventCount = function () {
        return Object.keys(this.__events).length;
    };
    EventDispatcher.prototype.listenerCount = function (event) {
        var _a;
        return ((_a = this.__events[event]) === null || _a === void 0 ? void 0 : _a.length) || 0;
    };
    EventDispatcher.prototype.on = function (event, callback) {
        if (!this.__events[event]) {
            this.__events[event] = [callback];
        }
        else {
            this.__events[event].push(callback);
        }
    };
    EventDispatcher.prototype.once = function (event, callback) {
        var _this = this;
        var fn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            try {
                return callback.apply(void 0, __spread(args));
            }
            finally {
                _this.off(event, fn);
            }
        };
        fn.__callback = callback;
        this.on(event, fn);
    };
    EventDispatcher.prototype.off = function (event, callback) {
        if (!this.__events) {
            return;
        }
        if (!callback) {
            delete this.__events[event];
            return;
        }
        var index = 0;
        for (var max = this.__events[event].length; index < max; index++) {
            if (this.__events[event][index] === callback ||
                this.__events[event][index].__callback === callback) {
                this.__events[event].splice(index, 1);
                break;
            }
        }
    };
    EventDispatcher.prototype.emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a;
        (_a = this.__events[event]) === null || _a === void 0 ? void 0 : _a.slice().forEach(function (fn) {
            fn.apply(void 0, __spread(args));
        });
    };
    EventDispatcher.prototype.emitSerial = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a;
        var p = Promise.resolve();
        (_a = this.__events[event]) === null || _a === void 0 ? void 0 : _a.slice().forEach(function (h) { return (p = p.then(function () { return h.apply(void 0, __spread(args)); })); });
        return p;
    };
    EventDispatcher.prototype.emitParallel = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a, _b;
        return Promise.all((_b = (_a = this.__events[event]) === null || _a === void 0 ? void 0 : _a.slice().map(function (fn) {
            return fn.apply(void 0, __spread(args));
        }), (_b !== null && _b !== void 0 ? _b : [])));
    };
    return EventDispatcher;
}());
export { EventDispatcher };
//# sourceMappingURL=EventDispatcher.js.map