"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-11-28 17:55:28
 */
Object.defineProperty(exports, "__esModule", { value: true });
class EventDispatcher {
    constructor() {
        this.__events = Object.create(null);
    }
    eventNames() {
        return Object.keys(this.__events);
    }
    eventCount() {
        return Object.keys(this.__events).length;
    }
    listenerCount(event) {
        var _a;
        return ((_a = this.__events[event]) === null || _a === void 0 ? void 0 : _a.length) || 0;
    }
    on(event, callback) {
        if (!this.__events[event]) {
            this.__events[event] = [callback];
        }
        else {
            this.__events[event].push(callback);
        }
    }
    once(event, callback) {
        const fn = (...args) => {
            try {
                return callback(...args);
            }
            finally {
                this.off(event, fn);
            }
        };
        fn.__callback = callback;
        this.on(event, fn);
    }
    off(event, callback) {
        if (!this.__events) {
            return;
        }
        if (!callback) {
            delete this.__events[event];
            return;
        }
        let index = 0;
        for (const max = this.__events[event].length; index < max; index++) {
            if (this.__events[event][index] === callback ||
                this.__events[event][index].__callback === callback) {
                this.__events[event].splice(index, 1);
                break;
            }
        }
    }
    emit(event, ...args) {
        var _a;
        (_a = this.__events[event]) === null || _a === void 0 ? void 0 : _a.slice().forEach((fn) => {
            fn(...args);
        });
    }
    emitSerial(event, ...args) {
        var _a;
        let p = Promise.resolve();
        (_a = this.__events[event]) === null || _a === void 0 ? void 0 : _a.slice().forEach((h) => (p = p.then(() => h(...args))));
        return p;
    }
    emitParallel(event, ...args) {
        var _a, _b;
        return Promise.all((_b = (_a = this.__events[event]) === null || _a === void 0 ? void 0 : _a.slice().map((fn) => {
            return fn(...args);
        }), (_b !== null && _b !== void 0 ? _b : [])));
    }
}
exports.EventDispatcher = EventDispatcher;
//# sourceMappingURL=EventDispatcher.js.map