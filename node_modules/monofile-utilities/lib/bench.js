"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-03-30 20:07:23
 *
 * run benchmark suite automatically, two usage way:
 *
 * 1. in foo.js
 *    bench(module)
 *    then run `node foo.js` in terminal
 *
 * 2. in terminal
 *    bench foo.js
 *
 * the foo.js should exports some variables instanceof benchmark.Suite
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const benchmark_1 = require("benchmark");
const G = tslib_1.__importStar(require("glob"));
const path = tslib_1.__importStar(require("path"));
function cycle(event) {
    console.log(this.name + ' -> ' + event.target);
}
function complete() {
    console.log('Fastest is ' + this.filter('fastest').map('name'));
    this.off('cycle', cycle);
    this.off('complete', complete);
}
function execute(exports, filename) {
    for (const key in exports) {
        if (exports.hasOwnProperty(key)) {
            const suite = exports[key];
            if (!(suite instanceof benchmark_1.Suite)) {
                continue;
            }
            if (!suite.name) {
                suite.name = path.basename(filename).replace(/\..*$/, '');
            }
            suite.on('cycle', cycle);
            suite.on('complete', complete);
            suite.run();
        }
    }
}
function bench(module) {
    if (!module.parent) {
        execute(module.exports, module.filename);
    }
}
exports.bench = bench;
if (!module.parent) {
    const argv = process.argv;
    const inputs = argv.length > 2 ? argv.slice(2) : ['./src/**/*.bench.*'];
    const called = {};
    for (const pattern of inputs) {
        const files = G.sync(pattern);
        for (const file of files) {
            if (!called[file]) {
                called[file] = true;
                const filename = path.join(process.cwd(), file);
                execute(require(filename), filename);
            }
        }
    }
}
//# sourceMappingURL=bench.js.map